#include<stdio.h>
#include<stdlib.h>
#include<ctype.h>
#include<string.h>
#include<math.h>

#define MAX 100


char stack[MAX];
int top = -1;


int character_integer_Converter(char sign)
{
    if(sign=='0')
        return 0;
    else if(sign=='1')
        return 1;
    else if(sign=='2')
        return 2;
    else if(sign=='3')
        return 3;
    else if(sign=='4')
        return 4;
    else if(sign=='5')
        return 5;
    else if(sign=='6')  
        return 6;
    else if(sign=='7')
        return 7;
    else if(sign=='8')
        return 8;
    else
        return 9;

}
int Check_Operator(char symbol)
{
	if(symbol == '^' || symbol == '*' || symbol == '/' || symbol == '+' || symbol =='-' || symbol =='%')
	{
		return 1;
	}
	else
	{
        return 0;
	}
}


int Calculate_postfix(char postfix[])
{
    int temp[MAX],n,a,rng=0,n1,n2,k,work=0,q[10],p;
    top=0;


    while(postfix[top])
    {
        if(digit_Check(postfix[top]))  
        {
            n=1;
            a=0;
            p=-1;
            while(digit_Check(postfix[top]))
            {
                q[++p]=character_integer_Converter(postfix[top++]);        // Every digit save here to make a total number
            }

            while(p>=0)
            {                   //   make a total number
                a+=(q[p--]*n);
                n=n*10;
            }

            temp[rng++]=a;
            work=1;             //top are increment here . No longer to increment another
        }

        if(Check_Operator(postfix[top]))
        {
            n2=temp[--rng];
            n1=temp[--rng];



            if(postfix[top]=='+')
                n2=(n1+n2);
            else if(postfix[top]=='-')
                n2=n1-n2;
            else if(postfix[top]=='*')
                n2=n1*n2;
            else if(postfix[top]=='/')
                n2=n1/n2;
            else if(postfix[top]=='^')
                n2=pow(5, n2);
            else if(postfix[top]=='%')
                n2=n1%n2;

                temp[rng++]=n2;       // result assign in temp array for next calculation

                 work=1;                //top are increment here . No longer to increment another
                 top++;

        }

        if(work==0)         // if there are an space , top increment one for next
            top++;

        work=0;
    }

    if(rng==1)                // last element are answer
        return temp[--rng];
    else
        {           //if last there are not last element one . the program break
        printf("Invalid input");
        exit(0);
        }
}


void push(char item)
{
	if(top >= MAX-1)
	{
		printf("\nThe Stack Overflow.");
	}
	else
	{
		stack[++top] = item;
	}
}


char pop()
{
	char item ;

	if(top <0)
	{
		printf("Stack is under flow");
		exit(1);
	}
	else
	{
		return stack[top--];
	}
}





int precedence(char symbol)
{
	if(symbol == '^')/* exponent operator, highest precedence*/
	{
		return(3);
	}
	else if(symbol == '*' || symbol == '/')
	{
		return(2);
	}
	else if(symbol == '+' || symbol == '-' || symbol == '%')          /* lowest precedence */
	{
		return(1);
	}
	else
	{
		return(0);
	}
}

void In_POst_Converter(char infix_array[], char postfix_array[])
{
	int i, j;
	char item;
	char x;

	push('(');                               /* push '(' onto stack */
	strcat(infix_array,")");                  /* adding ')' to infix expression */
       

	i=0;
	j=0;
	item=infix_array[i];         /* initialize before loop*/

	while(item != '\0')        /* run loop till end of infix expression(NULL character) */
	{
		if(item == '(')
		{
			push(item);
		}
		else if(digit_Check(item))
		{
			postfix_array[j] = item;              /* add operand symbol to postfix expression */
			j++;
		}
		else if(Check_Operator(item))        /* means symbol is operator */
		{
			x=pop();
			while(Check_Operator(x) == 1 && precedence(x)>= precedence(item))
			{
			    postfix_array[j++]=' ';                   // Set space between two operator
				postfix_array[j] = x;                  /* so pop all higher precedence operator  */
				j++;
				x = pop();                       /* add them to postfix expression */
			}
			postfix_array[j++]=' ';               // Set space between  operator and number
			push(x);                            //last operator are are not suitable so it remain in

			push(item);                 /* push current operator symbol onto stack */
		}
		else if(item == ')')         /* if current symbol is ')' then */
		{
			x = pop();                   /* pop and keep popping until */
			while(x != '(')                /* '(' encountered */
			{
			     postfix_array[j++]=' ';                  // Set space between two operator
				postfix_array[j] = x;
				j++;
				x = pop();
			}
		}
		else
		{
			printf("\nInvalid infix Expression.\n");        /* the it is illegeal  symbol */
			exit(1);
		}
		i++;        //infix notation increment one


		item = infix_array[i];        /* go to next symbol of infix expression */
	} 
	    if(top>0)
	    {
	    	printf("\nInvalid infix Expression.\n");        /* the it is illegeal  symbol */
	    	exit(1);
	    }


	postfix_array[j] = '\0';      
}


void Deleting_space(char infix[])
{
    int i,j=0;

    for(i=0;infix[i]; )
    {
        if(infix[i]==32)        //ancii code of space
            i++;
        else
           infix[j++]=infix[i++];            //space are replace by another digit
    }
    infix[j]='\0';      //terminated by null


}


int main()
{
	char infix[MAX], postfix[MAX];        
        int result;


	printf("\nEnter Infix expression : ");
	gets(infix);

	Deleting_space(infix);        //for delete space between any character

	In_POst_Converter(infix,postfix);              
	printf("Postfix Expression: ");
	puts(postfix);                     
	result=Calculate_postfix(postfix);          

	printf("Your result is %d\n",result);

}	
